basePath: /api/v1
definitions:
  dtos.ArticleCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully created article
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.ArticleResponse:
    properties:
      article_id:
        example: 1
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        example: Description
        type: string
      image:
        example: image.png
        type: string
      label:
        example: Label
        type: string
      title:
        example: Title
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.ArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully get article
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.BadRequestResponse:
    properties:
      errors: {}
      message:
        example: Bad Request
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  dtos.DashboardResponse:
    properties:
      count_order: {}
      count_train: {}
      count_user: {}
      new_order:
        items:
          additionalProperties: true
          type: object
        type: array
      new_user:
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  dtos.DashboardStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.DashboardResponse'
      message:
        example: Successfully get dashboard
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ForbiddenResponse:
    properties:
      errors: {}
      message:
        example: Forbidden
        type: string
      status_code:
        example: 403
        type: integer
    type: object
  dtos.GetAllArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleResponse'
      message:
        example: Successfully get article
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllHotelOrderStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelOrderResponse'
      message:
        example: Successfully get ticket order
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllHotelRoomStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelRoomResponse'
      message:
        example: Successfully get hotel room
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllHotelStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelResponse'
      message:
        example: Successfully get hotel
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllPaymentStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.PaymentResponse'
      message:
        example: Successfully get station
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllStationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.StationResponse'
      message:
        example: Successfully get station
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTicketTravelerDetailOrderStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TicketTravelerDetailOrderResponse'
      message:
        example: Successfully get ticket order
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTrainCarriageStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainCarriageResponse'
      message:
        example: Successfully get train carriage
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTrainStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponse'
      message:
        example: Successfully get train
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllTrainStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponses'
      message:
        example: Successfully get train
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllUserStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInformationResponse'
      message:
        example: Successfully get station
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetNotificationByUserIDStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.NotificationResponse'
      message:
        example: Successfully get notification
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HistorySearchCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HistorySearchResponse'
      message:
        example: Successfully created history search
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.HistorySearchInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dtos.HistorySearchResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  dtos.HistorySearchStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HistorySearchResponse'
      message:
        example: Successfully get history search
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HotelByIDResponse:
    properties:
      address:
        type: string
      class:
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        type: string
      email:
        type: string
      hotel_facilities:
        items:
          $ref: '#/definitions/dtos.HotelFacilitiesResponse'
        type: array
      hotel_id:
        type: integer
      hotel_image:
        items:
          $ref: '#/definitions/dtos.HotelImageResponse'
        type: array
      hotel_policy:
        $ref: '#/definitions/dtos.HotelPoliciesResponse'
      hotel_room:
        items:
          $ref: '#/definitions/dtos.HotelRoomHotelIDResponse'
        type: array
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.HotelByIDResponses:
    properties:
      address:
        type: string
      class:
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        type: string
      email:
        type: string
      hotel_facilities:
        items:
          $ref: '#/definitions/dtos.HotelFacilitiesResponse'
        type: array
      hotel_id:
        type: integer
      hotel_image:
        items:
          $ref: '#/definitions/dtos.HotelImageResponse'
        type: array
      hotel_policy:
        $ref: '#/definitions/dtos.HotelPoliciesResponse'
      hotel_room:
        $ref: '#/definitions/dtos.HotelRoomHotelIDResponse'
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.HotelByIDStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelByIDResponse'
      message:
        example: Successfully get hotel
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HotelCreeatedResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelResponse'
      message:
        example: Successfully created hotel
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.HotelFacilitiesInput:
    properties:
      name:
        type: string
    type: object
  dtos.HotelFacilitiesResponse:
    properties:
      hotel_id:
        type: integer
      name:
        type: string
    type: object
  dtos.HotelImageInput:
    properties:
      image_url:
        type: string
    type: object
  dtos.HotelImageResponse:
    properties:
      hotel_id:
        type: integer
      image_url:
        type: string
    type: object
  dtos.HotelInput:
    properties:
      address:
        type: string
      class:
        type: integer
      description:
        type: string
      email:
        type: string
      hotel_facilities:
        items:
          $ref: '#/definitions/dtos.HotelFacilitiesInput'
        type: array
      hotel_image:
        items:
          $ref: '#/definitions/dtos.HotelImageInput'
        type: array
      hotel_policy:
        items:
          $ref: '#/definitions/dtos.HotelPoliciesInput'
        type: array
      name:
        type: string
      phone_number:
        type: string
    type: object
  dtos.HotelOrderCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelOrderResponse'
      message:
        example: Successfully created ticket order
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.HotelOrderInput:
    properties:
      date_end:
        example: "2023-05-02"
        type: string
      date_start:
        example: "2023-05-01"
        type: string
      email_order:
        example: me@hanifz.com
        type: string
      hotel_room_id:
        description: HotelID          int                   `form:"hotel_id" json:"hotel_id"
          example:"1"`
        example: 1
        type: integer
      name_order:
        example: Mochammad Hanif
        type: string
      payment_id:
        example: 1
        type: integer
      phone_number_order:
        example: "085115151515"
        type: string
      quantity_adult:
        example: 1
        type: integer
      quantity_infant:
        example: 1
        type: integer
      special_request:
        example: Tambah 1 Bed
        type: string
      traveler_detail:
        items:
          $ref: '#/definitions/dtos.TravelerDetailInput'
        type: array
    type: object
  dtos.HotelOrderResponse:
    properties:
      check_in_date:
        example: "2023-05-01"
        type: string
      check_out_date:
        example: "2023-05-02"
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email_order:
        example: me@hanifz.com
        type: string
      hotel:
        $ref: '#/definitions/dtos.HotelByIDResponses'
      hotel_order_id:
        example: 1
        type: integer
      name_order:
        example: Mochammad Hanif
        type: string
      number_of_night:
        example: 1
        type: integer
      payment:
        $ref: '#/definitions/dtos.PaymentResponses'
      phone_number_order:
        example: "085115151515"
        type: string
      price:
        example: 50000
        type: integer
      quantity_adult:
        example: 1
        type: integer
      quantity_infant:
        example: 1
        type: integer
      special_request:
        example: Minta 1 Bed
        type: string
      status:
        example: unpaid
        type: string
      ticket_order_code:
        example: RANDOMCODE123
        type: string
      total_amount:
        example: 50000
        type: integer
      traveler_detail:
        items:
          $ref: '#/definitions/dtos.TravelerDetailResponse'
        type: array
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.HotelOrderStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelOrderResponse'
      message:
        example: Successfully get ticket order
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HotelPoliciesInput:
    properties:
      is_breakfast:
        type: boolean
      is_check_in_check_out:
        type: boolean
      is_check_in_early:
        type: boolean
      is_check_out_overdue:
        type: boolean
      is_pet:
        type: boolean
      is_policy_canceled:
        type: boolean
      is_policy_minimum_age:
        type: boolean
      is_smoking:
        type: boolean
      policy_minimum_age:
        type: integer
      time_breakfast_end:
        type: string
      time_breakfast_start:
        type: string
      time_check_in:
        type: string
      time_check_out:
        type: string
    type: object
  dtos.HotelPoliciesResponse:
    properties:
      hotel_id:
        type: integer
      is_breakfast:
        type: boolean
      is_check_in_check_out:
        type: boolean
      is_check_in_early:
        type: boolean
      is_check_out_overdue:
        type: boolean
      is_pet:
        type: boolean
      is_policy_canceled:
        type: boolean
      is_policy_minimum_age:
        type: boolean
      is_smoking:
        type: boolean
      policy_minimum_age:
        type: integer
      time_breakfast_end:
        type: string
      time_breakfast_start:
        type: string
      time_check_in:
        type: string
      time_check_out:
        type: string
    type: object
  dtos.HotelResponse:
    properties:
      address:
        type: string
      class:
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        type: string
      email:
        type: string
      hotel_facilities:
        items:
          $ref: '#/definitions/dtos.HotelFacilitiesResponse'
        type: array
      hotel_id:
        type: integer
      hotel_image:
        items:
          $ref: '#/definitions/dtos.HotelImageResponse'
        type: array
      hotel_policy:
        $ref: '#/definitions/dtos.HotelPoliciesResponse'
      hotel_room_start:
        type: integer
      name:
        type: string
      phone_number:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.HotelRoomCreeatedResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelRoomResponse'
      message:
        example: Successfully created hotel room
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.HotelRoomFacilitiesInput:
    properties:
      name:
        type: string
    type: object
  dtos.HotelRoomFacilitiesResponse:
    properties:
      hotel_id:
        type: integer
      hotel_room_id:
        type: integer
      name:
        type: string
    type: object
  dtos.HotelRoomHotelIDResponse:
    properties:
      description:
        type: string
      discount:
        type: integer
      discount_price:
        type: integer
      hotel_id:
        type: integer
      hotel_room_facility:
        items:
          $ref: '#/definitions/dtos.HotelRoomFacilitiesResponse'
        type: array
      hotel_room_id:
        type: integer
      hotel_room_image:
        items:
          $ref: '#/definitions/dtos.HotelRoomImageResponse'
        type: array
      mattress_size:
        type: string
      name:
        type: string
      normal_price:
        type: integer
      number_of_guest:
        type: integer
      number_of_mattress:
        type: integer
      quantity_of_room:
        type: integer
      size_of_room:
        type: integer
    type: object
  dtos.HotelRoomImageInput:
    properties:
      image_url:
        type: string
    type: object
  dtos.HotelRoomImageResponse:
    properties:
      hotel_id:
        type: integer
      hotel_room_id:
        type: integer
      image_url:
        type: string
    type: object
  dtos.HotelRoomInput:
    properties:
      description:
        type: string
      discount:
        type: integer
      hotel_id:
        type: integer
      hotel_room_facility:
        items:
          $ref: '#/definitions/dtos.HotelRoomFacilitiesInput'
        type: array
      hotel_room_image:
        items:
          $ref: '#/definitions/dtos.HotelRoomImageInput'
        type: array
      mattress_size:
        type: string
      name:
        type: string
      normal_price:
        type: integer
      number_of_guest:
        type: integer
      number_of_mattress:
        type: integer
      quantity_of_room:
        type: integer
      size_of_room:
        type: integer
    type: object
  dtos.HotelRoomResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        type: string
      discount:
        type: integer
      discount_price:
        type: integer
      hotel_id:
        type: integer
      hotel_room_facility:
        items:
          $ref: '#/definitions/dtos.HotelRoomFacilitiesResponse'
        type: array
      hotel_room_id:
        type: integer
      hotel_room_image:
        items:
          $ref: '#/definitions/dtos.HotelRoomImageResponse'
        type: array
      mattress_size:
        type: string
      name:
        type: string
      normal_price:
        type: integer
      number_of_guest:
        type: integer
      number_of_mattress:
        type: integer
      quantity_of_room:
        type: integer
      size_of_room:
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.HotelRoomStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelRoomResponse'
      message:
        example: Successfully get hotel room
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.HotelStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.HotelResponse'
      message:
        example: Successfully get hotel
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.InternalServerErrorResponse:
    properties:
      errors: {}
      message:
        example: Internal Server Error
        type: string
      status_code:
        example: 500
        type: integer
    type: object
  dtos.NotFoundResponse:
    properties:
      errors: {}
      message:
        example: Not Found
        type: string
      status_code:
        example: 404
        type: integer
    type: object
  dtos.NotificationResponse:
    properties:
      notification_content:
        items:
          $ref: '#/definitions/dtos.TemplateMessageByUserIDResponse'
        type: array
      user_id:
        type: integer
    type: object
  dtos.PaymentCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.PaymentResponse'
      message:
        example: Successfully created station
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.PaymentResponse:
    properties:
      account_name:
        example: PT Tripease
        type: string
      account_number:
        example: "00832982893221132"
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      id:
        example: 1
        type: integer
      image_url:
        example: bca.png
        type: string
      name:
        example: Bank Central Asia
        type: string
      type:
        example: Virtual Account
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.PaymentResponses:
    properties:
      account_name:
        example: PT Tripease
        type: string
      account_number:
        example: "00832982893221132"
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      image_url:
        example: bca.png
        type: string
      name:
        example: Bank Central Asia
        type: string
      payment_id:
        example: 1
        type: integer
      type:
        example: Virtual Account
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.PaymentStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.PaymentResponse'
      message:
        example: Successfully get station
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StationCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.StationResponse'
      message:
        example: Successfully created station
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.StationInput:
    properties:
      initial:
        example: PSE
        type: string
      name:
        example: Pasar Senen
        type: string
      origin:
        example: Jakarta
        type: string
    type: object
  dtos.StationResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      deleted_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      initial:
        example: PSE
        type: string
      name:
        example: Pasar Senen
        type: string
      origin:
        example: Jakarta
        type: string
      station_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.StationResponseSimply:
    properties:
      arrive_time:
        example: "00:00"
        type: string
      initial:
        example: PSE
        type: string
      name:
        example: Pasar Senen
        type: string
      origin:
        example: Jakarta
        type: string
      station_id:
        example: 1
        type: integer
    type: object
  dtos.StationStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.StationResponse'
      message:
        example: Successfully get station
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StatusOKDeletedResponse:
    properties:
      errors: {}
      message:
        example: Successfully deleted
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StatusOKResponse:
    properties:
      data: {}
      message:
        example: Successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TemplateMessageByUserIDResponse:
    properties:
      content:
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      title:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TicketOrderCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TicketOrderResponse'
      message:
        example: Successfully created ticket order
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.TicketOrderInput:
    properties:
      email_order:
        example: me@hanifz.com
        type: string
      name_order:
        example: Mochammad Hanif
        type: string
      payment_id:
        example: 1
        type: integer
      phone_number_order:
        example: "085115151515"
        type: string
      quantity_adult:
        example: 1
        type: integer
      quantity_infant:
        example: 1
        type: integer
      ticket_traveler_detail_departure:
        items:
          $ref: '#/definitions/dtos.TicketTravelerDetailInput'
        type: array
      ticket_traveler_detail_return:
        items:
          $ref: '#/definitions/dtos.TicketTravelerDetailInput'
        type: array
      traveler_detail:
        items:
          $ref: '#/definitions/dtos.TravelerDetailInput'
        type: array
      with_return:
        example: true
        type: boolean
    type: object
  dtos.TicketOrderResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email_order:
        example: me@hanifz.com
        type: string
      name_order:
        example: Mochammad Hanif
        type: string
      payment:
        $ref: '#/definitions/dtos.PaymentResponses'
      phone_number_order:
        example: "085115151515"
        type: string
      price:
        example: 50000
        type: integer
      quantity_adult:
        example: 1
        type: integer
      quantity_infant:
        example: 1
        type: integer
      status:
        example: unpaid
        type: string
      ticket_order_code:
        example: RANDOMCODE123
        type: string
      ticket_order_id:
        example: 1
        type: integer
      ticket_traveler_detail:
        items:
          $ref: '#/definitions/dtos.TicketTravelerDetailResponse'
        type: array
      total_amount:
        example: 50000
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TicketOrderStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TicketOrderResponse'
      message:
        example: Successfully get ticket order
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TicketTravelerDetailInput:
    properties:
      date:
        example: "2023-05-31"
        type: string
      station_destination_id:
        example: 2
        type: integer
      station_origin_id:
        example: 1
        type: integer
      train_carriage_id:
        description: TrainID              int    `form:"train_id" json:"train_id"
          example:"1"`
        example: 1
        type: integer
      train_seat_id:
        example: 2
        type: integer
    type: object
  dtos.TicketTravelerDetailOrderResponse:
    properties:
      boarding_ticket_code:
        example: RANDOMBOARDINGTICKETCODE123
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      date:
        example: "2023-05-31"
        type: string
      email_order:
        example: me@hanifz.com
        type: string
      name_order:
        example: Mochammad Hanif
        type: string
      payment:
        $ref: '#/definitions/dtos.PaymentResponses'
      phone_number_order:
        example: "085115151515"
        type: string
      quantity_adult:
        example: 1
        type: integer
      quantity_infant:
        example: 0
        type: integer
      station_destination:
        $ref: '#/definitions/dtos.StationResponseSimply'
      station_origin:
        $ref: '#/definitions/dtos.StationResponseSimply'
      status:
        example: "2023-05-31"
        type: string
      ticket_order_code:
        example: RANDOMCODE123
        type: string
      ticket_order_id:
        example: 1
        type: integer
      train:
        $ref: '#/definitions/dtos.TrainResponsesSimply'
      traveler_detail:
        items:
          $ref: '#/definitions/dtos.TravelerDetailResponse'
        type: array
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      user:
        $ref: '#/definitions/dtos.UserInformationResponses'
    type: object
  dtos.TicketTravelerDetailOrderStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TicketTravelerDetailOrderResponse'
      message:
        example: Successfully get ticket order
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TicketTravelerDetailResponse:
    properties:
      boarding_ticket_code:
        example: RANDOMBOARDINGTICKETCODE123
        type: string
      date:
        example: "2023-05-31"
        type: string
      station_destination:
        $ref: '#/definitions/dtos.StationResponseSimply'
      station_origin:
        $ref: '#/definitions/dtos.StationResponseSimply'
      ticket_traveler_detail_id:
        example: 1
        type: integer
      train:
        $ref: '#/definitions/dtos.TrainResponsesSimply'
      traveler_detail:
        $ref: '#/definitions/dtos.TravelerDetailResponse'
    type: object
  dtos.TrainCarriageCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainCarriageResponse'
      message:
        example: Successfully created train carriage
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.TrainCarriageInput:
    properties:
      class:
        example: Ekonomi
        type: string
      name:
        example: Gerbong 1
        type: string
      price:
        example: 50000
        type: integer
      train_id:
        example: 1
        type: integer
    type: object
  dtos.TrainCarriageResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      name:
        example: Gerbong 1
        type: string
      seat:
        items:
          $ref: '#/definitions/dtos.TrainSeatResponse'
        type: array
      train:
        $ref: '#/definitions/dtos.TrainResponse'
      train_carriage_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TrainCarriageResponses:
    properties:
      class:
        example: Ekonomi
        type: string
      name:
        example: Gerbong 1
        type: string
      seat:
        items:
          $ref: '#/definitions/dtos.TrainSeatResponse'
        type: array
      train_carriage_id:
        example: 1
        type: integer
    type: object
  dtos.TrainCarriageStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainCarriageResponse'
      message:
        example: Successfully get train carriage
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TrainCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponse'
      message:
        example: Successfully created train
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.TrainInput:
    properties:
      code_train:
        example: TRAIN001
        type: string
      name:
        example: Bengawan
        type: string
      route:
        items:
          $ref: '#/definitions/dtos.TrainStationInput'
        type: array
      status:
        example: available
        type: string
    type: object
  dtos.TrainResponse:
    properties:
      class:
        example: Ekonomi
        type: string
      code_train:
        example: TRAIN001
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      name:
        example: Bengawan
        type: string
      price:
        example: 50000
        type: integer
      route:
        items:
          $ref: '#/definitions/dtos.TrainStationResponse'
        type: array
      status:
        example: available
        type: string
      train_carriage:
        items:
          $ref: '#/definitions/dtos.TrainCarriageResponses'
        type: array
      train_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TrainResponses:
    properties:
      code_train:
        example: TRAIN001
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      deleted_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      name:
        example: Bengawan
        type: string
      route:
        items:
          $ref: '#/definitions/dtos.TrainStationResponse'
        type: array
      status:
        example: available
        type: string
      train_id:
        example: 1
        type: integer
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.TrainResponsesSimply:
    properties:
      class:
        example: Ekonomi
        type: string
      code_train:
        example: TRAIN001
        type: string
      name:
        example: Bengawan
        type: string
      train_carriage:
        example: Gerbong 1
        type: string
      train_carriage_id:
        example: 1
        type: integer
      train_id:
        example: 1
        type: integer
      train_price:
        example: 50000
        type: integer
      train_seat:
        example: A1
        type: string
      train_seat_id:
        example: 1
        type: integer
    type: object
  dtos.TrainSeatResponse:
    properties:
      id:
        type: integer
      name:
        example: A1
        type: string
    type: object
  dtos.TrainStationInput:
    properties:
      arrive_time:
        example: "00:00"
        type: string
      station_id:
        example: 1
        type: integer
    type: object
  dtos.TrainStationResponse:
    properties:
      arrive_time:
        type: string
      station:
        $ref: '#/definitions/dtos.StationInput'
      station_id:
        example: 1
        type: integer
    type: object
  dtos.TrainStatusOKResponses:
    properties:
      data:
        $ref: '#/definitions/dtos.TrainResponses'
      message:
        example: Successfully get train
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.TravelerDetailInput:
    properties:
      full_name:
        example: Mochammad Hanif
        type: string
      id_card_number:
        example: "1902389012801211"
        type: string
      title:
        example: Saudara
        type: string
    type: object
  dtos.TravelerDetailResponse:
    properties:
      full_name:
        example: Mochammad Hanif
        type: string
      id_card_number:
        example: "1902389012801211"
        type: string
      title:
        example: Saudara
        type: string
      traveler_detail_id:
        example: 1
        type: integer
    type: object
  dtos.UnauthorizedResponse:
    properties:
      errors: {}
      message:
        example: Unauthorized
        type: string
      status_code:
        example: 401
        type: integer
    type: object
  dtos.UserCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInformationResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.UserInformationResponse:
    properties:
      birth_date:
        example: "2002-09-12"
        type: string
      citizen:
        example: Indonesia
        type: string
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      deleted_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email:
        example: me@hanifz.com
        type: string
      full_name:
        example: Mochammad Hanif
        type: string
      id:
        example: 1
        type: integer
      phone_number:
        example: "0851555555151"
        type: string
      profile_picture_url:
        example: https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg
        type: string
      role:
        example: user
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2ODQ0MDYzMzMsInJvbGUiOiJ1c2VyIiwidXNlcklkIjozfQ.B8vBlMIiU4iZR0YHe4-Mo3DpJ2nwlTV3PuhEJc31pMo
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.UserInformationResponses:
    properties:
      birth_date:
        example: "2002-09-12"
        type: string
      citizen:
        example: Indonesia
        type: string
      email:
        example: me@hanifz.com
        type: string
      full_name:
        example: Mochammad Hanif
        type: string
      phone_number:
        example: "0851555555151"
        type: string
      profile_picture_url:
        example: https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dtos.UserLoginInput:
    properties:
      email:
        example: me@hanifz.com
        type: string
      password:
        example: qweqwe123
        type: string
    type: object
  dtos.UserRegisterInput:
    properties:
      birth_date:
        example: "2002-09-12"
        type: string
      confirm_password:
        example: qweqwe123
        type: string
      email:
        example: me@hanifz.com
        type: string
      full_name:
        example: Mochammad Hanif
        type: string
      is_active:
        example: true
        type: boolean
      password:
        example: qweqwe123
        type: string
      phone_number:
        example: "0851555555151"
        type: string
      role:
        example: user
        type: string
    type: object
  dtos.UserStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserInformationResponse'
      message:
        example: Successfully get user credentials
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.UserUpdatePasswordInput:
    properties:
      confirm_password:
        example: asdqwe123
        type: string
      new_password:
        example: asdqwe123
        type: string
      old_password:
        example: qweqwe123
        type: string
    type: object
  dtos.UserUpdateProfileInput:
    properties:
      birth_date:
        example: "2000-01-01"
        type: string
      citizen:
        example: Indonesia
        type: string
      full_name:
        example: Hanif Mochammad
        type: string
      phone_number:
        example: "085199999999"
        type: string
    type: object
  helpers.Meta:
    properties:
      current_page:
        example: 1
        type: integer
      next_page: {}
      prev_page:
        example: 1
        type: integer
      total:
        example: 1
        type: integer
    type: object
  models.Url:
    properties:
      url:
        type: string
    required:
    - url
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8088
info:
  contact:
    name: Capstone Alterra Group 7
    url: https://github.com/capstone-alterra-group-7
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tripease API Documentation
  version: "1.0"
paths:
  /admin/article:
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      - description: Title article
        in: formData
        name: title
        required: true
        type: string
      - description: Description article
        in: formData
        name: description
        required: true
        type: string
      - description: Label article
        in: formData
        name: label
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ArticleCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - Admin - Article
  /admin/article/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a article
      tags:
      - Admin - Article
    put:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      - description: Title article
        in: formData
        name: title
        required: true
        type: string
      - description: Description article
        in: formData
        name: description
        required: true
        type: string
      - description: Label article
        in: formData
        name: label
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update article
      tags:
      - Admin - Article
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Get dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.DashboardStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard
      tags:
      - Admin - Dashboard
  /admin/hotel:
    post:
      consumes:
      - application/json
      description: Create a new hotel
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HotelInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.HotelCreeatedResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new hotel
      tags:
      - Admin - Hotel
  /admin/hotel-room:
    post:
      consumes:
      - application/json
      description: Create a new hotel room
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HotelRoomInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.HotelRoomCreeatedResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new hotel room
      tags:
      - Admin - Hotel Room
  /admin/hotel-room/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a hotel room
      parameters:
      - description: ID Hotel Room
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a hotel room
      tags:
      - Admin - Hotel Room
    put:
      consumes:
      - application/json
      description: Update hotel room
      parameters:
      - description: ID Hotel Room
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HotelRoomInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelRoomStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update hotel room
      tags:
      - Admin - Hotel Room
  /admin/hotel/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a hotel
      parameters:
      - description: ID Hotel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a hotel
      tags:
      - Admin - Hotel
    put:
      consumes:
      - application/json
      description: Update hotel
      parameters:
      - description: ID hotel
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HotelInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update hotel
      tags:
      - Admin - Hotel
  /admin/order/hotel:
    get:
      consumes:
      - application/json
      description: Get Hotel Order User
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Hotel rating class
        in: query
        name: rating_class
        type: integer
      - description: search hotel name
        in: query
        name: search
        type: string
      - description: Date start
        in: query
        name: date_start
        type: string
      - description: Date end
        in: query
        name: date_end
        type: string
      - description: Order by name
        in: query
        name: order_by
        type: string
      - description: Filter by status order
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllHotelOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Hotel Order User
      tags:
      - Admin - Order
  /admin/order/hotel/detail:
    get:
      consumes:
      - application/json
      description: Get Hotel Order User
      parameters:
      - description: Hotel Order ID
        in: query
        name: hotel_order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Hotel Order User
      tags:
      - Admin - Order
  /admin/order/ticket:
    get:
      consumes:
      - application/json
      description: Get Ticket Order User
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: search train name
        in: query
        name: search
        type: string
      - description: Date start
        in: query
        name: date_start
        type: string
      - description: Date end
        in: query
        name: date_end
        type: string
      - description: Order by name
        in: query
        name: order_by
        type: string
      - description: Filter by status order
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTicketTravelerDetailOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Ticket Order User
      tags:
      - Admin - Order
  /admin/order/ticket/detail:
    get:
      consumes:
      - application/json
      description: Get Ticket Order User
      parameters:
      - description: Ticket Order ID
        in: query
        name: ticket_order_id
        required: true
        type: integer
      - description: Train ID
        in: query
        name: train_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TicketTravelerDetailOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Ticket Order User
      tags:
      - Admin - Order
  /admin/payment:
    post:
      consumes:
      - application/json
      description: Create a new payment
      parameters:
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      - description: Type payment
        in: formData
        name: type
        required: true
        type: string
      - description: Name payment
        in: formData
        name: name
        required: true
        type: string
      - description: Account name payment
        in: formData
        name: account_name
        required: true
        type: string
      - description: Account number payment
        in: formData
        name: account_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.PaymentCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new payment
      tags:
      - Admin - Payment
  /admin/payment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a payment
      parameters:
      - description: ID payment
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a payment
      tags:
      - Admin - Payment
    put:
      consumes:
      - application/json
      description: Update payment
      parameters:
      - description: ID payment
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      - description: Type payment
        in: formData
        name: type
        required: true
        type: string
      - description: Name payment
        in: formData
        name: name
        required: true
        type: string
      - description: Account name payment
        in: formData
        name: account_name
        required: true
        type: string
      - description: Account number payment
        in: formData
        name: account_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PaymentStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update payment
      tags:
      - Admin - Payment
  /admin/station:
    get:
      consumes:
      - application/json
      description: Get all stations
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search data
        in: query
        name: search
        type: string
      - description: Sort by name
        in: query
        name: sort_by
        type: string
      - description: Filter data
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllStationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all stations
      tags:
      - Admin - Station
    post:
      consumes:
      - application/json
      description: Create a new station
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.StationInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.StationCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new station
      tags:
      - Admin - Station
  /admin/station/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a station
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a station
      tags:
      - Admin - Station
    put:
      consumes:
      - application/json
      description: Update station
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.StationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update station
      tags:
      - Admin - Station
  /admin/train:
    get:
      consumes:
      - application/json
      description: Get all train
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search data
        in: query
        name: search
        type: string
      - description: Sort by name
        in: query
        name: sort_by
        type: string
      - description: Filter data
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all train
      tags:
      - Admin - Train
    post:
      consumes:
      - application/json
      description: Create a new train
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.TrainCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new train
      tags:
      - Admin - Train
  /admin/train-carriage:
    post:
      consumes:
      - application/json
      description: Create a new train carriage
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/dtos.TrainCarriageInput'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.TrainCarriageCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new train carriage
      tags:
      - Admin - Train Carriage
  /admin/train-carriage/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a train carriage
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a train carriage
      tags:
      - Admin - Train Carriage
    put:
      consumes:
      - application/json
      description: Update train carriage
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainCarriageInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update train carriage
      tags:
      - Admin - Train Carriage
  /admin/train/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a train
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a train
      tags:
      - Admin - Train
    put:
      consumes:
      - application/json
      description: Update train
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TrainInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update train
      tags:
      - Admin - Train
  /admin/user:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search data
        in: query
        name: search
        type: string
      - description: Sort by name
        in: query
        name: sort_by
        type: string
      - description: Filter data
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllUserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Admin - User
  /admin/user/detail:
    get:
      consumes:
      - application/json
      description: Get detail user
      parameters:
      - description: User ID
        in: query
        name: id
        type: integer
      - description: Update deleted user
        in: query
        name: isDeleted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllUserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get detail user
      tags:
      - Admin - User
  /admin/user/register:
    post:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Register user
      tags:
      - Admin - User
  /admin/user/update/{id}:
    put:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: ID user
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Admin - User
  /login:
    post:
      consumes:
      - application/json
      description: Login an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Login
      tags:
      - User - Account
  /public/article:
    get:
      consumes:
      - application/json
      description: Get all articles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all articles
      tags:
      - Admin - Article
  /public/article/{id}:
    get:
      consumes:
      - application/json
      description: Get article by ID
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get article by ID
      tags:
      - Admin - Article
  /public/cloudinary/file-upload:
    post:
      consumes:
      - application/json
      description: Upload file to cloudinary
      parameters:
      - description: Photo file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Upload file
      tags:
      - Cloudinary
  /public/cloudinary/url-upload:
    post:
      consumes:
      - application/json
      description: Upload file to cloudinary
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Url'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Upload file
      tags:
      - Cloudinary
  /public/hotel:
    get:
      consumes:
      - application/json
      description: Get all hotel
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllHotelStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all hotel
      tags:
      - Admin - Hotel
  /public/hotel-room:
    get:
      consumes:
      - application/json
      description: Get all hotel room
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllHotelRoomStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all hotel room
      tags:
      - Admin - Hotel Room
  /public/hotel-room/{id}:
    get:
      consumes:
      - application/json
      description: Get hotel room by ID
      parameters:
      - description: ID Hotel Room
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelRoomStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get hotel room by ID
      tags:
      - Admin - Hotel Room
  /public/hotel/{id}:
    get:
      consumes:
      - application/json
      description: Get hotel by ID
      parameters:
      - description: ID Hotel
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelByIDStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get hotel by ID
      tags:
      - Admin - Hotel
  /public/payment:
    get:
      consumes:
      - application/json
      description: Get all payments
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllPaymentStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all payments
      tags:
      - Admin - Payment
  /public/payment/{id}:
    get:
      consumes:
      - application/json
      description: Get payment by ID
      parameters:
      - description: ID payment
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PaymentStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get payment by ID
      tags:
      - Admin - Payment
  /public/station:
    get:
      consumes:
      - application/json
      description: Get all stations
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllStationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all stations
      tags:
      - Admin - Station
  /public/station/{id}:
    get:
      consumes:
      - application/json
      description: Get station by ID
      parameters:
      - description: ID station
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StationStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get station by ID
      tags:
      - Admin - Station
  /public/train:
    get:
      consumes:
      - application/json
      description: Get all train
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all train
      tags:
      - Admin - Train
  /public/train-carriage:
    get:
      consumes:
      - application/json
      description: Get all train carriage
      parameters:
      - description: Train id
        in: query
        name: train_id
        type: integer
      - description: Class train
        in: query
        name: class
        type: string
      - description: Date order
        in: query
        name: date
        type: string
      - description: Status train
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all train carriage
      tags:
      - Admin - Train Carriage
  /public/train-carriage/{id}:
    get:
      consumes:
      - application/json
      description: Get train carriage by ID
      parameters:
      - description: ID train carriage
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainCarriageStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get train carriage by ID
      tags:
      - Admin - Train Carriage
  /public/train/{id}:
    get:
      consumes:
      - application/json
      description: Get train by ID
      parameters:
      - description: ID train
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TrainStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get train by ID
      tags:
      - Admin - Train
  /register:
    post:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Register
      tags:
      - User - Account
  /user:
    get:
      consumes:
      - application/json
      description: User get credentials
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Credentials
      tags:
      - User - Account
  /user/delete-photo-profile:
    delete:
      consumes:
      - application/json
      description: User update an information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Information
      tags:
      - User - Account
  /user/history-search:
    get:
      consumes:
      - application/json
      description: Get all history search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HistorySearchStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all history search
      tags:
      - User - History Search
    post:
      consumes:
      - application/json
      description: Create a new history search
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HistorySearchInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.HistorySearchCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new history search
      tags:
      - User - History Search
  /user/history-search/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a history search
      parameters:
      - description: ID history search
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a history search
      tags:
      - User - History Search
  /user/hotel/order:
    patch:
      consumes:
      - application/json
      description: Update Order Hotel
      parameters:
      - description: Hotel Order ID
        in: query
        name: hotel_order_id
        required: true
        type: integer
      - description: Update Status Order ID
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Order Hotel
      tags:
      - User - Hotel
    post:
      consumes:
      - application/json
      description: Order Hotel
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.HotelOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.HotelOrderCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Order Hotel
      tags:
      - User - Hotel
  /user/hotel/search:
    get:
      consumes:
      - application/json
      description: Search Hotel
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter minimum price
        in: query
        name: minimum_price
        type: integer
      - description: Filter maximum price
        in: query
        name: maximum_price
        type: integer
      - description: Filter rating class
        in: query
        name: rating_class
        type: integer
      - description: Search address hotel
        in: query
        name: address
        type: string
      - description: Search name hotel
        in: query
        name: name
        type: string
      - description: Filter by price
        in: query
        name: sort_by_price
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllHotelStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Search Hotel Available
      tags:
      - User - Hotel
  /user/notification/{id}:
    get:
      consumes:
      - application/json
      description: Get notification by user id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetNotificationByUserIDStatusOKResponses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get notification by user id
      tags:
      - user - Hotel
  /user/order/hotel:
    get:
      consumes:
      - application/json
      description: Get Hotel Order User
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status order
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllHotelOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Hotel Order User
      tags:
      - User - Order
  /user/order/hotel/detail:
    get:
      consumes:
      - application/json
      description: Get Hotel Order User by ID
      parameters:
      - description: Hotel Order ID
        in: query
        name: hotel_order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.HotelOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Hotel Order User by ID
      tags:
      - User - Order
  /user/order/ticket:
    get:
      consumes:
      - application/json
      description: Get Ticket Order User
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status order
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTicketTravelerDetailOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Ticket Order User
      tags:
      - User - Order
  /user/order/ticket/detail:
    get:
      consumes:
      - application/json
      description: Get Ticket Order User by ID
      parameters:
      - description: Ticket Order ID
        in: query
        name: ticket_order_id
        required: true
        type: integer
      - description: Train ID
        in: query
        name: train_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TicketTravelerDetailOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Ticket Order User by ID
      tags:
      - User - Order
  /user/train/order:
    patch:
      consumes:
      - application/json
      description: Update Order ticket KA
      parameters:
      - description: Ticket Order ID
        in: query
        name: ticket_order_id
        required: true
        type: integer
      - description: Update Status Order ID
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TicketOrderStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Order ticket KA
      tags:
      - User - Train
    post:
      consumes:
      - application/json
      description: Order ticket KA
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.TicketOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.TicketOrderCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Order ticket KA
      tags:
      - User - Train
  /user/train/search:
    get:
      consumes:
      - application/json
      description: Search Train
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Station origin id
        in: query
        name: station_origin_id
        required: true
        type: integer
      - description: Station destination id
        in: query
        name: station_destination_id
        required: true
        type: integer
      - description: Filter by train id
        in: query
        name: sort_by_train_id
        type: integer
      - description: Filter by class name
        in: query
        name: sort_by_class
        type: string
      - description: Filter by price
        in: query
        name: sort_by_price
        type: string
      - description: Filter by arrive time
        in: query
        name: sort_by_arrive_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllTrainStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Search Train Available
      tags:
      - User - Train
  /user/update-password:
    put:
      consumes:
      - application/json
      description: User update an password
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Password
      tags:
      - User - Account
  /user/update-photo-profile:
    put:
      consumes:
      - application/json
      description: User update an photo profile
      parameters:
      - description: Photo file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Photo Profile
      tags:
      - User - Account
  /user/update-profile:
    put:
      consumes:
      - application/json
      description: User update an profile
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdateProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Profile
      tags:
      - User - Account
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
